function OpenTerminalWithCommand(cmd)
	-- –°–æ–∑–¥–∞—ë–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∞ (40% —à–∏—Ä–∏–Ω—ã) –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ–≥–æ
	vim.cmd('rightbelow vsplit | vertical resize 50')

	-- –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
	vim.cmd('terminal ' .. cmd)

	-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤—Å—Ç–∞–≤–∫–∏
	vim.cmd('startinsert')

	-- –ñ—ë—Å—Ç–∫–æ –±–∏–Ω–¥–∏–º Esc –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
	vim.cmd([[
	tnoremap <buffer> <Esc> <C-\><C-n>:close!<CR>
	]])
end

-- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
vim.api.nvim_create_user_command('Format', function()
	-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∫—É 'b' –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
	vim.cmd('normal mbgg=G`b')
end, {})
-- –ö–æ–º–∞–Ω–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è emfy
vim.api.nvim_create_user_command('EmfyFormat', function()
	-- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–æ–≤
	local old_expandtab = vim.bo.expandtab
	local old_shiftwidth = vim.bo.shiftwidth
	local old_tabstop = vim.bo.tabstop
	local old_softtabstop = vim.bo.softtabstop

	-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è 2 –ø—Ä–æ–±–µ–ª–æ–≤
	vim.bo.expandtab = true
	vim.bo.shiftwidth = 2
	vim.bo.tabstop = 2
	vim.bo.softtabstop = 2

	-- –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	vim.cmd('normal mbgg=G`b')

	-- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	vim.bo.expandtab = old_expandtab
	vim.bo.shiftwidth = old_shiftwidth
	vim.bo.tabstop = old_tabstop
	vim.bo.softtabstop = old_softtabstop
end, {})

-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä–µ–≤–∞ NERDTree –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
vim.api.nvim_create_augroup('NERDTreeAutoUpdate', { clear = true })
vim.api.nvim_create_autocmd('DirChanged', {
	group = 'NERDTreeAutoUpdate',
	pattern = '*',
	callback = function()
		require("nvim-tree.api").tree.change_root(vim.fn.getcwd())
	end,
})


vim.api.nvim_create_user_command(
	'ClearWIN',
	function()
		vim.cmd([[%s/\r//g]])  -- –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É
		print("–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ ^M (CR) –∏–∑ —Ñ–∞–π–ª–∞")
	end,
	{ desc = "Remove all Windows CR (^M) characters" }
)


vim.api.nvim_create_user_command('W', function()
	local tmpfile = vim.fn.tempname()
	local filepath = vim.fn.expand('%:p')
	vim.cmd('w! ' .. tmpfile)
	vim.fn.inputsave()  -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥
	local password = vim.fn.inputsecret('–ü–∞—Ä–æ–ª—å sudo: ')  -- –°–∫—Ä—ã—Ç—ã–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
	vim.fn.inputrestore()  -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–≤–æ–¥
	local cmd = string.format('echo %s | sudo -S cp -f %s %s && rm -f %s', 
	vim.fn.shellescape(password), tmpfile, filepath, tmpfile)
	vim.cmd('!' .. cmd)
end, { bang = true })

local function setup_resize_mode()
	local opts = { noremap = true, silent = true }

	-- –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–µ—Å–∞–π–∑–∞
	vim.keymap.set('n', '<Leader>r', function()
		-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏
		local original_maps = {}
		local keys = { 'h', 'j', 'k', 'l', 'q', '<Esc>' }

		for _, key in ipairs(keys) do
			original_maps[key] = vim.fn.maparg(key, 'n')
		end

		-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
		vim.cmd('echo "Resize mode: h/j/k/l to resize, q/Esc to quit"')

		local maps = {
			{ 'h', ':vertical resize -2<CR>' },
			{ 'j', ':resize -2<CR>' },
			{ 'k', ':resize +2<CR>' },
			{ 'l', ':vertical resize +2<CR>' },
			{ 'q', function() 
				-- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
				for key, cmd in pairs(original_maps) do
					if cmd ~= '' then
						vim.api.nvim_set_keymap('n', key, cmd, { noremap = true, silent = true })
					else
						vim.api.nvim_del_keymap('n', key)
					end
				end
				vim.cmd('echo ""')
			end },
			{ '<Esc>', function() 
				-- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
				for key, cmd in pairs(original_maps) do
					if cmd ~= '' then
						vim.api.nvim_set_keymap('n', key, cmd, { noremap = true, silent = true })
					else
						vim.api.nvim_del_keymap('n', key)
					end
				end
				vim.cmd('echo ""')
			end }
		}

		for _, map in ipairs(maps) do
			if type(map[2]) == 'string' then
				vim.api.nvim_set_keymap('n', map[1], map[2], { noremap = true, silent = true })
			else
				vim.keymap.set('n', map[1], map[2], { noremap = true, silent = true })
			end
		end
	end, opts)
end

setup_resize_mode()

vim.api.nvim_create_autocmd("FileType", { -- –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç—Å—Ç—É–ø–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö –±—É—Ñ–µ—Ä–æ–≤
  pattern = { "org", "markdown", "text", "gitcommit" },
  callback = function()
    vim.bo.autoindent = false
    vim.bo.smartindent = false
    vim.bo.cindent = false
    vim.bo.indentexpr = ""
    vim.bo.formatoptions = vim.bo.formatoptions:gsub("[cro]", "")
  end,
})



vim.api.nvim_create_user_command('LumInstallXdebug', function()
    local config_dir = vim.fn.stdpath('config')
    local xdebug_dir = config_dir .. '/xdebug'
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if vim.fn.isdirectory(xdebug_dir) == 0 then
        vim.notify("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è xdebug –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " .. xdebug_dir, vim.log.levels.ERROR)
        return
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json
    local package_json = xdebug_dir .. '/package.json'
    if vim.fn.filereadable(package_json) == 0 then
        vim.notify("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ xdebug", vim.log.levels.WARN)
        return
    end
    
    vim.notify("üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –≤ " .. xdebug_dir .. " –∏ –∑–∞–ø—É—Å–∫ npm install...", vim.log.levels.INFO)
    
    -- –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    vim.cmd('cd ' .. vim.fn.fnameescape(xdebug_dir))
    vim.cmd('terminal npm install')
end, {})


vim.api.nvim_create_user_command('EmfyGenerateEnvWithConfig', function()
    local json_str = vim.fn.getline(1, '$')
    json_str = table.concat(json_str, '\n')
    
    -- –ü–∞—Ä—Å–∏–º JSON
    local ok, json_data = pcall(vim.fn.json_decode, json_str)
    if not ok or type(json_data) ~= 'table' or #json_data == 0 then
        vim.notify('Invalid JSON format', vim.log.levels.ERROR)
        return
    end
    
    local widget_data = json_data[1]
    local first_key = next(widget_data)
    if not first_key then
        vim.notify('No widget data found', vim.log.levels.ERROR)
        return
    end
    
    local data = widget_data[first_key]
    
    -- –°–æ–∑–¥–∞–µ–º .env —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    local env_lines = {
        string.format('FOLDER_WIDGET="%s"', data.developer or ''),
        string.format('WIDGET_NAME="%s"', first_key),
        string.format('CLIENT_SECRET="%s"', data.client_secret or ''),
        string.format('CLIENT_ID="%s"', data.client_id or ''),
        string.format('APP_NAME="%s"', data.app_name or ''),
        string.format('WIDGET_NAME_RU="%s"', data.widget_name or ''),
        string.format('API_KEY="%s"', data.api_key or ''),
        string.format('REDIRECT_URL="%s"', data.redirect_uri or ''),
        string.format('PARENT_FOLDER_NAME="%s"', data.folder or ''),
        'API_TOKEN=028d485e3428d07a563b140239a28b34',
        '',
        'RABBIT_MQ_HOST=api.emfy.com',
        'RABBIT_MQ_PORT=5672',
        'RABBIT_MQ_USER=rabbitmqadmin',
        'RABBIT_MQ_PASSWORD=aY9DeshWP6awkWIB'
    }
    
    -- –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞
    vim.api.nvim_buf_set_lines(0, 0, -1, false, env_lines)
    vim.notify('JSON converted to .env format', vim.log.levels.INFO)
end, {})
